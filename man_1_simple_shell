.TL
This is the manpage of the SeRiShell project in Holberton School

.TH SeRiShell "21 April 2022" "0x16. C" "-Simple Shell"

.SH NAME
.B SeRiShell - Standard input line for receiving instructions via commands 

.SH SYNOPSIS
.B [COMMAND] [FLAGS]

.B #include \fB"shell.h"

.SH DESCRIPTION
.B \fBSeRiShell()\fR

The \fBSeRiShell\fR program displays a prompt with standard input line for
receiving instructions vía commands like the linux shell interpreter.
For example, if a user enters ls then the shell executes the ls command.

man ./man_1_simple_shell	Display this manual 

    
.SH OPTIONS
    Un listado de las posibles opciones y qué hace cada una.
.SH EXAMPLES
SeRiShell:/simple_shell$ ls	List directory contents

SeRiShell:/simple_shell$ ls -a	List directory contents including hide files

SeRiShell:/simple_shell$ ls -l	List directory contents using a long format

SeRiShell:/simple_shell$ cd	Move the cursor at home directory

SeRiShell:/simple_shell$ cd [Directory]	Move the cursor to a lower directory

SeRiShell:/simple_shell$ cd ..	Move the cursor to the top directory

SeRiShell:/simple_shell$ cd -	Move the cursor to the previous directory

.SH EXIT VALUES
    Posibles códigos de retorno y su significado.
.SH SEE ALSO
    Full documentation at: <https://github.com/>
Relative commands and functions
.SH BUGS
    Lista de bugs conocidos.
.SH FILES
Files included are:

shell_start.c

shell.h

_execute_process.c

_getenv.c

_getline.c

_process_luncher.c

_read_input.c

_search_no_build_in.c

_strings.c

_strtok.c

av_line_saver.c

build_ins.c

build_ins_2.c

get_build_in.c

memory_allocation.c

num_to_char.c    

.SH HISTORY
    Historial de cambios.
.SH AUTHORS
    Written by Sebastián García and Ricardo Montaña.
.SH COPYRIGHT
    Especificar la información del copyright.














produces output according to a format as
described below. The \fB_printf()\fR function write output to stdout,
the standard output stream and return the number of characters printed.

The function write the output under the control of a format string that
specifies how subsequent arguments are converted for output.

\fBFORMAT of the format string\fR

The format string is a character string, beginning and ending in
its initial shift state, if any.  The format string is composed
of zero or more directives: ordinary characters (not %), which
are copied unchanged to the output stream; and conversion
specifications, each of which results in fetching zero or more
subsequent arguments.  Each conversion specification is
introduced by the character %, and ends with a conversion
specifier.

The overall syntax of a conversion specification is:

\fB%conversion\fR

The arguments must correspond properly (after type promotion) with
the conversion specifier. By default, the arguments are used in the
order given and each conversion specifier asks for the next
argument (and it is an error if insufficiently many arguments are
given).

\fBConversion especifies\fR

A character that specifies the type of conversion to be applied.
The conversion specifiers and their meanings are:

d, i            The int argument is converted to signed decimal notation.

X               The unsigned int argument is converted to unsigned decimal (u), or
                unsigned hexadecimal (the letters ABCDEF are used for X conversions.
c               The int argument is converted to an unsigned char, and the resulting
                character is written.

s               The const char * argument is expected to be a pointer to an array of
                character type (pointer to a string).  Characters from the array are
                written up to (but not including) a terminating null byte ('\0').

%               A '%' is written. No argument is converted. The complete conversion
                specification is '%%'.

\fBRETURN VALUE\fR
Upon successful return, these function return the number of characters printed (excluding the null byte used to end output to strings).

\fBAUTHORS\fR
Written by Sebastián García and Ricardo Montaña





    Descripción textual del comando o función.
OPTIONS
    Un listado de las posibles opciones y qué hace cada una.
EXAMPLES
    Un ejemplo de cómo se usa.
EXIT VALUES
     Posibles códigos de retorno y su significado. 
SEE ALSO
    Una lista de comandos relacionados o funciones.
BUGS
    Lista de bugs conocidos.
FILES
    Lista de archivos incluidos en el paquete.
HISTORY
    Historial de cambios.
AUTHOR
   Información del desarrollador o contacto.
COPYRIGHT
    Especificar la información del copyright.
